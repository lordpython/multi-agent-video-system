# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Google Imagen 4 API integration tool for image generation agent."""

import os
import base64
from typing import Dict, Any, List
from pydantic import BaseModel, Field
from google import genai
from PIL import Image
from io import BytesIO


class ImagenGenerationInput(BaseModel):
    """Input schema for Imagen 4 image generation tool."""
    prompt: str = Field(description="The text prompt for image generation")
    aspect_ratio: str = Field(default="1:1", description="Image aspect ratio: '1:1', '9:16', '16:9', '4:3', '3:4'")
    number_of_images: int = Field(default=1, description="Number of images to generate (1-8)")
    person_generation: str = Field(default="ALLOW_ADULT", description="Person generation policy: 'ALLOW_ADULT', 'BLOCK_SOME'")
    output_mime_type: str = Field(default="image/jpeg", description="Output format: 'image/jpeg' or 'image/png'")


def generate_imagen_image(
    prompt: str, 
    aspect_ratio: str = "1:1", 
    number_of_images: int = 1, 
    person_generation: str = "ALLOW_ADULT",
    output_mime_type: str = "image/jpeg"
) -> Dict[str, Any]:
    """
    Generate images using Google's Imagen 4 API.
    
    Args:
        prompt: The text prompt for image generation
        aspect_ratio: Image aspect ratio specification
        number_of_images: Number of images to generate
        person_generation: Person generation policy
        output_mime_type: Output image format
        
    Returns:
        Dict containing generated image data and metadata
    """
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        return {
            "images": [{
                "image_bytes": "",
                "base64": "",
                "error": "GEMINI_API_KEY environment variable is not set",
                "source": "imagen4",
                "status": "error"
            }],
            "prompt": prompt,
            "total_images": 0,
            "source": "imagen4"
        }
    
    try:
        # Initialize the Gemini client
        client = genai.Client(api_key=api_key)
        
        # Validate and set parameters
        valid_aspect_ratios = ["1:1", "9:16", "16:9", "4:3", "3:4"]
        if aspect_ratio not in valid_aspect_ratios:
            aspect_ratio = "1:1"
        
        valid_person_generation = ["ALLOW_ADULT", "BLOCK_SOME"]
        if person_generation not in valid_person_generation:
            person_generation = "ALLOW_ADULT"
        
        valid_mime_types = ["image/jpeg", "image/png"]
        if output_mime_type not in valid_mime_types:
            output_mime_type = "image/jpeg"
        
        number_of_images = max(1, min(number_of_images, 8))  # Clamp between 1 and 8
        
        # Generate images using Imagen 4
        result = client.models.generate_images(
            model="models/imagen-4.0-generate-preview-06-06",
            prompt=prompt,
            config=dict(
                number_of_images=number_of_images,
                output_mime_type=output_mime_type,
                person_generation=person_generation,
                aspect_ratio=aspect_ratio,
            ),
        )
        
        if not result.generated_images:
            return {
                "images": [{
                    "image_bytes": "",
                    "base64": "",
                    "error": "No images generated by Imagen 4",
                    "source": "imagen4",
                    "status": "error"
                }],
                "prompt": prompt,
                "total_images": 0,
                "source": "imagen4"
            }
        
        # Extract and format generated images
        images = []
        for i, generated_image in enumerate(result.generated_images):
            try:
                # Convert image bytes to base64 for storage/transmission
                image_bytes = generated_image.image.image_bytes
                base64_image = base64.b64encode(image_bytes).decode('utf-8')
                
                # Get image dimensions using PIL
                image_pil = Image.open(BytesIO(image_bytes))
                width, height = image_pil.size
                
                formatted_image = {
                    "image_bytes": image_bytes,
                    "base64": base64_image,
                    "width": width,
                    "height": height,
                    "aspect_ratio": aspect_ratio,
                    "mime_type": output_mime_type,
                    "source": "imagen4",
                    "model": "imagen-4.0-generate-preview-06-06",
                    "status": "success",
                    "usage_rights": "Generated content - check Google usage policies",
                    "media_type": "image",
                    "prompt": prompt,
                    "image_id": f"imagen4_{i+1}"
                }
                images.append(formatted_image)
                
            except Exception as img_error:
                error_image = {
                    "image_bytes": "",
                    "base64": "",
                    "error": f"Failed to process generated image {i+1}: {str(img_error)}",
                    "source": "imagen4",
                    "status": "error"
                }
                images.append(error_image)
        
        return {
            "images": images,
            "prompt": prompt,
            "total_images": len([img for img in images if img["status"] == "success"]),
            "source": "imagen4",
            "model": "imagen-4.0-generate-preview-06-06"
        }
        
    except Exception as e:
        error_image = {
            "image_bytes": "",
            "base64": "",
            "error": f"Failed to generate image with Imagen 4: {str(e)}",
            "source": "imagen4",
            "status": "error"
        }
        
        return {
            "images": [error_image],
            "prompt": prompt,
            "total_images": 0,
            "source": "imagen4"
        }


# Create the tool function for ADK
imagen_generation_tool = generate_imagen_image